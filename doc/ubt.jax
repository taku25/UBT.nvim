*ubt.jax*       For UBT.nvim                          vim: ft=help

==============================================================================
目次                                                     *UBT-contents*

  1. はじめに..................................... |UBT-introduction|
  2. 使い方....................................... |UBT-usage|
     - コマンド................................... |UBT-commands|
     - UIピッカー連携............................. |UBT-picker-integration|
  3. 設定......................................... |UBT-configuration|
     - セットアップ............................... |UBT-setup|
     - プロジェクト固有の設定..................... |UBT-project-config|
  4. Lua API...................................... |UBT-api|
  5. ライセンス................................... |UBT-license|

==============================================================================
1. はじめに                                         *UBT-introduction*

*UBT.nvim* は、Unreal Engine のビルド、`compile_commands.json` 生成、プロジェ
クトファイル生成、静的解析といった機能を、Neovimから直接、非同期で実行する
ためのプラグインです。

このプラグインはコアライブラリとして *UNL.nvim* に依存しています。

主な機能:
- Unreal Build Toolの非同期実行
- fidget.nvimによるリアルタイムな進捗表示 (オプション)
- Telescopeやfzf-luaによる対話的なUIピッカー (オプション)
- プロジェクト固有の設定を`.unlrc.json`で管理

==============================================================================
2. 使い方                                                     *UBT-usage*

------------------------------------------------------------------------------
コマンド                                                   *UBT-commands*

全てのコマンドは、`.uproject`ファイルが存在するディレクトリ内で実行する必要が
あります。

:UBT Build[!] [{target_name}]
    プロジェクトをビルドします。
    - `{target_name}` を省略した場合、設定された |'UBT.preset_target'| が
      使用されます。
    - `!` を付けて実行すると、UIピッカーが起動し、ターゲットを選択して
      ビルドできます。

:UBT GenHeader[!] [{target_name}]
    Unreal Header Tool (UHT) を実行してヘッダーファイルを生成します。
    - {target_name} の扱いは |:UBT Build| と同様です。
    - {module_name} はオプションで、特定のモジュールのみを対象にできます。
    - ! を付けて実行すると、UIピッカーでターゲットを選択できます。

:UBT GenCompileDB[!] [{target_name}]
    `compile_commands.json`を生成します。
    - `{target_name}` の扱いは |:UBT Build| と同様です。
    - `!` を付けて実行すると、UIピッカーでターゲットを選択できます。

:UBT Diagnostics
    直近のビルドで発生したエラーや警告をUIピッカーで一覧表示します。
    項目を選択すると、ファイルのプレビューが表示され、<CR>で該当箇所に
    ジャンプできます。

:UBT GenProject
    Visual Studioなどのプロジェクトファイルを生成します。

:UBT Lint [{linter_type}] [{target_name}]
    静的解析を実行します。引数を省略した場合、設定された |'UBT.lint_type'|
    と |'UBT.preset_target'| が使用されます。

------------------------------------------------------------------------------
UIピッカー連携                                  *UBT-picker-integration*

Telescope.nvim や fzf-lua がインストールされている場合、`UBT.nvim` はそれらを
自動的にUIピッカーとして使用します。どのUIを使用するかは |'UBT.ui'| オプショ
ンで設定できます。

UIピッカーは以下のコマンドで起動できます:
- |:UBT Build!|
- |:UBT GenHeader!|
- |:UBT GenCompileDB!|
- |:UBT Diagnostics|

==============================================================================
3. 設定                                               *UBT-configuration*

------------------------------------------------------------------------------
セットアップ                                                   *UBT-setup*

`lazy.nvim` を使っている場合、`opts` キーに設定テーブルを渡します。

例:
>lua
  -- lua/plugins/ubt.lua
  return {
    'taku25/UBT.nvim',
    dependencies = { 'taku25/UNL.nvim' },
    opts = {
      preset_target = "Win64DebugGameWithEditor",
      engine_path = "C:/Program Files/Epic Games/UE_5.4",
    }
  }
<
利用可能な全てのオプションは以下の通りです。

`presets`                                                 *'UBT.presets'*
    Type: `table`
    ビルドターゲットの定義プリセットのリスト。
    デフォルトのプリセットに追加したり、同じ `name` で上書きしたりできます。

`preset_target`                                           *'UBT.preset_target'*
    Type: `string`
    Default: `"Win64DevelopWithEditor"`
    コマンドでターゲット名を省略した際に使われるデフォルトのターゲット。

`lint_type`                                               *'UBT.lint_type'*
    Type: `string`
    Default: `"Default"`
    |:UBT Lint| でlinterタイプを省略した際に使われるデフォルトのタイプ。

`engine_path`                                             *'UBT.engine_path'*
    Type: `string` or `nil`
    Default: `nil`
    エンジンのルートパスを明示的に指定します。`nil` の場合は自動検出します。

`progress_file_name`                                      *'UBT.progress_file_name'*
    Type: `string`
    Default: `"progress.log"`
    ビルドの診断ログ（エラーや警告）を書き出すファイル名。|:UBT Diagnostics|
    で読み込まれます。

`ui`                                                      *'UBT.ui'*
    Type: `table`
    `UNL.nvim` から継承したUI設定。
    例:
>lua
  ui = {
    picker = {
      mode = "auto", -- "auto", "telescope", "fzf_lua", "native"
      prefer = { "telescope", "fzf_lua" },
    },
    progress = {
      mode = "auto", -- "auto", "fidget", "window", "notify"
    },
  },
<

`logging`                                                 *'UBT.logging'*
    Type: `table`
    `UNL.nvim` から継承したロギング設定。
    例:
>lua
  logging = {
    level = "info",
    echo = { level = "warn" },
    notify = { level = "error", prefix = "[UBT]" },
    file = { filename = "ubt.log" },
  },
<

------------------------------------------------------------------------------
プロジェクト固有の設定                            *UBT-project-config*

プロジェクトのルートディレクトリ（`.uproject` がある場所）に `.unlrc.json`
という名前のJSONファイルを作成することで、グローバルな設定を上書きできます。

設定可能な項目は |UBT-setup| で説明されているオプションと同じです。

例: `.unlrc.json`
>json
  {
    "preset_target": "LinuxShipping",
    "engine_path": "D:/UE_Custom/UE_5.4_Linux"
  }
<

==============================================================================
4. Lua API                                                     *UBT-api*

`UBT.nvim` は、あなたの設定や他のプラグインから呼び出せるLua APIを提供します。

APIモジュールを `require` する:
>lua
  local ubt_api = require("UBT.api")
<

ubt_api.build({opts})                                       *UBT.api.build*
    プロジェクトをビルドします。
    `opts` テーブルで `label` などを指定できます。
    例: `ubt_api.build({ label = "Win64DebugGame" })`

ubt_api.gen_compile_db({opts})                          *UBT.api.gen_compile_db*
    `compile_commands.json` を生成します。
    `opts` テーブルで `label` などを指定できます。

ubt_api.diagnostics({opts})                             *UBT.api.diagnostics*
    診断ピッカーを開きます。`opts` は現在使用されません。

ubt_api.gen_header({opts})                             *UBT.api.gen_hader*
    UHTを起動してヘッダーを作成します
    `opts` テーブルで `label` などを指定できます。

ubt_api.gen_project({opts})                             *UBT.api.gen_project*
    プロジェクトファイルを生成します。`opts` は現在使用されません。

ubt_api.lint({opts})                                        *UBT.api.lint*
    静的解析を実行します。
    `opts` テーブルで `label` や `lintType` を指定できます。

ubt_api.find_project_root({start_path})             *UBT.api.find_project_root*
    指定されたパスから親を遡り、プロジェクトルートのパスを返します。
    返り値: `(string|nil)` -- `(root_path)`

==============================================================================
5. ライセンス                                                 *UBT-license*

MIT License

Copyright (c) 2025 taku25

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
...

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
