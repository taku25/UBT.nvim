*ubt.txt*       For UBT.nvim                          vim: ft=help

==============================================================================
CONTENTS                                                 *UBT-contents*

  1. Introduction................................. |UBT-introduction|
  2. Usage........................................ |UBT-usage|
     - Commands................................... |UBT-commands|
     - UI Picker Integration...................... |UBT-picker-integration|
  3. Configuration................................ |UBT-configuration|
     - Setup...................................... |UBT-setup|
     - Project-Specific Settings.................. |UBT-project-config|
  4. Lua API...................................... |UBT-api|
  5. License...................................... |UBT-license|

==============================================================================
1. INTRODUCTION                                     *UBT-introduction*

*UBT.nvim* is a plugin that allows you to run Unreal Engine's build,
`compile_commands.json` generation, project file generation, and static
analysis tasks directly from Neovim, asynchronously.

This plugin depends on the core library *UNL.nvim*.

Main Features:
- Asynchronous execution of the Unreal Build Tool.
- Real-time progress display with fidget.nvim (optional).
- Interactive UI pickers with Telescope or fzf-lua (optional).
- Project-specific settings management with `.unlrc.json`.

==============================================================================
2. USAGE                                                      *UBT-usage*

------------------------------------------------------------------------------
COMMANDS                                                   *UBT-commands*

All commands must be executed from within an Unreal Engine project directory
(i.e., a directory containing a `.uproject` file).

:UBT Build[!] [{target_name}]
    Builds the project.
    - If `{target_name}` is omitted, the configured |'UBT.preset_target'|
      will be used.
    - Execute with `!` to open a UI picker to select a build target.

:UBT GenCompileDB[!] [{target_name}]
    Generates `compile_commands.json`.
    - The handling of `{target_name}` is the same as |:UBT Build|.
    - Execute with `!` to open a UI picker to select a target.

:UBT Diagnostics
    Lists errors and warnings from the most recent build in a UI picker.
    You can preview the file and press <CR> to jump to the location.

:UBT GenProject
    Generates project files for IDEs like Visual Studio.

:UBT Lint [{linter_type}] [{target_name}]
    Runs static analysis. If arguments are omitted, the configured
    |'UBT.lint_type'| and |'UBT.preset_target'| will be used.

------------------------------------------------------------------------------
UI PICKER INTEGRATION                           *UBT-picker-integration*

If Telescope.nvim or fzf-lua is installed, `UBT.nvim` will automatically use
them as a UI picker. You can configure which UI to use with the |'UBT.ui'|
option.

The UI picker can be opened with the following commands:
- |:UBT Build!|
- |:UBT GenCompileDB!|
- |:UBT Diagnostics|

==============================================================================
3. CONFIGURATION                                      *UBT-configuration*

------------------------------------------------------------------------------
SETUP                                                      *UBT-setup*

If you are using `lazy.nvim`, pass your configuration table to the `opts` key.

Example:
>lua
  -- lua/plugins/ubt.lua
  return {
    'taku25/UBT.nvim',
    dependencies = { 'taku25/UNL.nvim' },
    opts = {
      preset_target = "Win64DebugGameWithEditor",
      engine_path = "C:/Program Files/Epic Games/UE_5.4",
    }
  }
<
The following are all available options.

`presets`                                                 *'UBT.presets'*
    Type: `table`
    A list of pre-defined build targets. You can add new presets or
    override existing ones by using the same `name`.

`preset_target`                                           *'UBT.preset_target'*
    Type: `string`
    Default: `"Win64DevelopWithEditor"`
    The default target used when a target name is omitted in commands.

`lint_type`                                               *'UBT.lint_type'*
    Type: `string`
    Default: `"Default"`
    The default linter type used when omitted in the |:UBT Lint| command.

`engine_path`                                             *'UBT.engine_path'*
    Type: `string` or `nil`
    Default: `nil`
    Explicitly sets the engine root path. If `nil`, it will be auto-detected.

`progress_file_name`                                *'UBT.progress_file_name'*
    Type: `string`
    Default: `"progress.log"`
    The filename for the build's diagnostic log (errors and warnings), which
    is read by the |:UBT Diagnostics| command.

`ui`                                                      *'UBT.ui'*
    Type: `table`
    UI settings inherited from `UNL.nvim`.
    Example:
>lua
  ui = {
    picker = {
      mode = "auto", -- "auto", "telescope", "fzf_lua", "native"
      prefer = { "telescope", "fzf_lua" },
    },
    progress = {
      mode = "auto", -- "auto", "fidget", "window", "notify"
    },
  },
<

`logging`                                                 *'UBT.logging'*
    Type: `table`
    Logging settings inherited from `UNL.nvim`.
    Example:
>lua
  logging = {
    level = "info",
    echo = { level = "warn" },
    notify = { level = "error", prefix = "[UBT]" },
    file = { filename = "ubt.log" },
  },
<

------------------------------------------------------------------------------
PROJECT-SPECIFIC SETTINGS                       *UBT-project-config*

You can override your global settings by creating a JSON file named
`.unlrc.json` in your project's root directory (where the `.uproject` file is).

The configurable options are the same as those explained in |UBT-setup|.

Example: `.unlrc.json`
>json
  {
    "preset_target": "LinuxShipping",
    "engine_path": "D:/UE_Custom/UE_5.4_Linux"
  }
<

==============================================================================
4. LUA API                                                    *UBT-api*

`UBT.nvim` provides a stable Lua API that can be called from your configuration
or other plugins.

To require the API module:
>lua
  local ubt_api = require("UBT.api")
<

ubt_api.build({opts})                                       *UBT.api.build*
    Builds the project.
    You can specify a `label` in the `opts` table.
    Example: `ubt_api.build({ label = "Win64DebugGame" })`

ubt_api.gen_compile_db({opts})                          *UBT.api.gen_compile_db*
    Generates `compile_commands.json`.
    You can specify a `label` in the `opts` table.

ubt_api.diagnostics({opts})                             *UBT.api.diagnostics*
    Opens the diagnostics picker. `opts` is currently not used.

ubt_api.gen_project({opts})                             *UBT.api.gen_project*
    Generates project files. `opts` is currently not used.

ubt_api.lint({opts})                                        *UBT.api.lint*
    Runs static analysis.
    You can specify `label` and `lintType` in the `opts` table.

ubt_api.find_project_root({start_path})             *UBT.api.find_project_root*
    Searches upwards from a given path to find the project root.
    Returns: `(string|nil)` -- `(root_path)`

==============================================================================
5. LICENSE                                                    *UBT-license*

MIT License

Copyright (c) 2025 taku25

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
...

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
